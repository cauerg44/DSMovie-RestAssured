package com.devsuperior.dsmovie.controllers;

import static io.restassured.RestAssured.baseURI;
import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.hasItems;
import static org.hamcrest.CoreMatchers.is;

import java.util.HashMap;
import java.util.Map;

import org.json.JSONException;
import org.json.simple.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import io.restassured.http.ContentType;

public class ScoreControllerRA {
	
	private Long nonExistingMovieId;
	
	private Map<String, Object> saveScoreInstance;
	
	@BeforeEach
	void setUp() throws JSONException {
		baseURI = "http://localhost:8080";
		
		nonExistingMovieId = 100L;
		
		saveScoreInstance = new HashMap<>();
	}
	
	@Test
	public void saveScoreShouldReturnNotFoundWhenMovieIdDoesNotExist() throws Exception {
		saveScoreInstance.put("movieId", nonExistingMovieId);
		JSONObject newProduct = new JSONObject(saveScoreInstance);
		
		given()
			.contentType(ContentType.JSON)
			.accept(ContentType.JSON)
			.body(newProduct)
		.when()
			.put("/scores")
		.then()
			.statusCode(404)
			.body("status", is(404))
			.body("error", equalTo("Recurso n√£o encontrado"))
			.body("path", equalTo("/scores"));
	}
	
	@Test
	public void saveScoreShouldReturnUnprocessableEntityWhenMissingMovieId() throws Exception {
	}
	
	@Test
	public void saveScoreShouldReturnUnprocessableEntityWhenScoreIsLessThanZero() throws Exception {		
	}
}
